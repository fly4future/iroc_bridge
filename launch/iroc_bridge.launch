<launch>

  <!-- defines name of the namespace -->
  <arg name="GS_NS" default="$(optenv GS_NS gs)" />

  <arg name="custom_config" default="" />

  <arg name="url" default="127.0.0.1" />
  <arg name="server_port" default="8080" />
  <arg name="client_port" default="8000" />

  <!-- config files -->
  <arg name="network_config" default="$(optenv NETWORK_CONFIG)" />

  <!-- will it run using GNU debugger? -->
  <arg name="DEBUG" default="false" />
  <arg unless="$(arg DEBUG)" name="launch_prefix_debug" value=""/>
  <arg     if="$(arg DEBUG)" name="launch_prefix_debug" value="debug_roslaunch"/>

  <!-- will it run as standalone nodelet or using a nodelet manager? -->
  <arg name="standalone" default="true" />
  <arg name="manager" default="$(arg GS_NS)_iroc_bridge_manager" />
  <arg unless="$(arg standalone)" name="nodelet" value="load"/>
  <arg     if="$(arg standalone)" name="nodelet" value="standalone"/>
  <arg unless="$(arg standalone)" name="nodelet_manager" value="$(arg manager)"/>
  <arg     if="$(arg standalone)" name="nodelet_manager" value=""/>



  <group ns="$(arg GS_NS)">

    <!-- IROCBridge nodelet -->
    <node pkg="nodelet" type="nodelet" name="iroc_bridge" args="$(arg nodelet) iroc_bridge/IROCBridge $(arg nodelet_manager)" launch-prefix="$(arg launch_prefix_debug)" output="screen">

      <param name="config" value="$(find iroc_bridge)/config/config.yaml" />
      <param name="url" value="$(arg url)" />
      <param name="server_port" value="$(arg server_port)" />
      <param name="client_port" value="$(arg client_port)" />

      <param if="$(eval arg('network_config') == '')" name="network_config" value="" />
      <param if="$(eval not arg('network_config') == '' and arg('network_config')[0] == '/')" name="network_config" value="$(arg network_config)" />
      <param if="$(eval not arg('network_config') == '' and not arg('network_config')[0] == '/')" name="network_config" value="$(env PWD)/$(arg network_config)" />

      <param if="$(eval arg('custom_config') == '')" name="custom_config" value="" />
      <param if="$(eval not arg('custom_config') == '' and arg('custom_config')[0] == '/')" name="custom_config" value="$(arg custom_config)" />
      <param if="$(eval not arg('custom_config') == '' and not arg('custom_config')[0] == '/')" name="custom_config" value="$(env PWD)/$(arg custom_config)" />

      <!-- Publishers -->
      <remap from="~path_out" to="trajectory_generation/path" />

      <!-- Subscribers (note that the topic names will also be remapped using the namespace as a prefix) -->

      <remap from="~in/general_robot_info" to="/state_monitor/general_robot_info" />
      <remap from="~in/state_estimation_info" to="/state_monitor/state_estimation_info" />
      <remap from="~in/control_info" to="/state_monitor/control_info" />
      <remap from="~in/collision_avoidance_info" to="/state_monitor/collision_avoidance_info" />
      <remap from="~in/uav_info" to="/state_monitor/uav_info" />
      <remap from="~in/system_health_info" to="/state_monitor/system_health_info" />

      <!-- Services -->
      <remap from="~arm" to="/uav1/hw_api/arming" />
      <remap from="~offboard" to="/uav1/hw_api/offboard" />
      <remap from="~land" to="/uav1/uav_manager/land" />

    </node>

  </group>

</launch>
